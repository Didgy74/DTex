[x] = Done
[-] = In Progress
[o] = Cancelled

[x] - Rename to Texas
[x] - Make modular / customizable
[x] - Add "Load from buffer" option
[ ] - Add "Load from buffer with allocation callbacks" option.
[-] - Fix GL enums -> Texas enums conversions
[ } - Make custom allocator interface class
[ ] - Make "LoadFromFile" use custom allocator
[x] - Figure out what validation should be required, which should be optional etc.
	File validation is required. Interface usage validation may not be in the future.
[-] - Add field to deferred loading "Required working memory", make sure you can determine this ahead of time.
[x] - Try to remove all exceptions (should be possible)
	I am 98% sure they are all gone.
[x] - Remove STL dependencies
	This one should be more or less entirely done.
[ ] - Re-think the interface (stuff like if returning optional is the best choice)
[-] - Add support for reading PNG
	Almost done. Needs to test a few formats, and add support interlaced images and indexed color images.
[ ] - Add support for KTX2, BMP, DDS, JPEG
[ ] - Add support for file-writing
[ ] - Check if DTex::BlockInfo should be in internal:: namespace
[ ] - Figure out if writing and reading an image format should be separate CMake options
[ ] - Rename detail:: namespace to internal::     maybe?
[-] - Maybe rename DTex::Dimensions to ... DTex::Extents3D maybe?
	Decided on not doing this. Maybe shorten to Dim instead.
[x] - Rename DTex::LoadInfo<T> to DTex::LoadResult<T>
[ ] - Find better name for DTex::OpenFile, maybe UnclosedFile? Maybe something with the word "Temp"?
[ ] - Make allowing dynamic allocations inside loading a CMake option!
[ ] - Maybe start using the term "Image" instead of "Texture", or atleast stick to one. Texture is more closely related to "Texas"
[x] - Better name for DTex::ResultInfo enumerator? ResultType?
	Renamed to ResultType.
[ ] - Make "Load from stream" option, make an interface class for the stream. Add also one that uses std::ifstream.
[x] - Stop using std::filesystem::path, just use const char*.
[x] - Check if using std::string_view is fine.
	Decided on not using std::string_view. Maybe make my own StringView class.
[ ] - Add support for texture streaming for formats where it would work
[x] - If using uint8_t types, make sure to use std:: version.
[ ] - Find better names for Texas::TextureType enumerators
	Particularly the TexturexD identifiers.
[x] - Make a Span class
[ ] - Add a "TEXAS_ENABLE_STL" macro to allow i.e std::vector -> span conversion
[ ] - Create Vulkan enums -> Texas enums converters
[x] - Create OpenGL enums -> Texas enums converters
	This one should be more or less done.
[x] - Switch out Span<T> for ByteSpan perhaps?
[o] - Add loading method where you specify the FileFormat of texture to load
	Is there actually any point to this?
	No, there is not. Atleast not for the current interface.
[ ] - Move examples into it's own Git repo
[o] - Maybe add a "Assume all files are not corrupt" option?
	Do NOT do this. You can maybe disable validation on interface usage, but not file validation.
[x] - Stop using char in ByteSpan.
	Changed this to use std::byte
[ ] - Get the interface back to a working state. Stuff like grabbing data offsets into a texture etc.
[ ] - Remove Pair<T, U> class. I doubt I will ever need it again.
[x] - Move the OpenBuffer implementation details into it's own header.
[ ] - Investigate how I can implement the OpenBuffer backend data without including any of the backend data headers.
[ ] - Rename OpenBuffer to maybe MemoryRequirements?
[ ] - Fix so that texture loader can recognize all file-formats, not only enabled ones.
[ ] - Find out how small a file could possibly be and still be valid.
[ ] - Maybe remove Tools namespace?
[ ] - Add opt-in assertions
[ ] - Investigate if there is any point to somehow undef'ing the assert in public headers
[ ] - When the implementation is in the header, like templated types, maybe move implementation into it's own header under detail?

Test that basic stuff works correctly:
	Mip levels
	Array layers - Seems to work fine for KTX images so far
	3D textures
	Test that all BCn formats work